name: Build, Release, and Publish Chrome Extension
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Version Increment Type (major, minor, patch) - Leave empty for auto detection based on commit message'
        required: false
        default: ''
      newVersion:
        description: 'New Version (e.g., 1.2.3) - Overrides versionType if set'
        required: false
        default: ''
env:
  DIRECTORY: app
  PROJECT_NAME: chrome-emacs
  ZIP_NAME: release.zip
jobs:
  PrepareBuildAndZip:
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.update-version.outputs.NEW_VERSION }}
      OLD_VERSION: ${{ steps.update-version.outputs.OLD_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Install dependencies
        run: npm ci
      - name: Update manifest version
        id: update-version
        run: |
          VERSION_FILE=version.env
          CURRENT_VERSION=$(jq -r '.version' $DIRECTORY/manifest.json)
          echo "OLD_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          MANUAL_VERSION_TYPE="${{ github.event.inputs.versionType }}"
          MANUAL_NEW_VERSION="${{ github.event.inputs.newVersion }}"
          
          if [[ -n "$MANUAL_NEW_VERSION" ]]; then
            NEW_VERSION="$MANUAL_NEW_VERSION"
          else
            IFS='.' read -ra VERSION <<< "$CURRENT_VERSION"
            if [[ "$MANUAL_VERSION_TYPE" == "major" || "${{ github.event.head_commit.message }}" =~ ^major: ]]; then
              VERSION[0]=$((VERSION[0]+1))
              VERSION[1]=0
              VERSION[2]=0
            elif [[ "$MANUAL_VERSION_TYPE" == "minor" || "${{ github.event.head_commit.message }}" =~ ^minor: ]]; then
              VERSION[1]=$((VERSION[1]+1))
              VERSION[2]=0
            elif [[ "$MANUAL_VERSION_TYPE" == "patch" || "${{ github.event.head_commit.message }}" =~ ^patch: ]]; then
              VERSION[2]=$((VERSION[2]+1))
            else
              echo "No version increment specified, skipping."
              exit 0
            fi
            NEW_VERSION="${VERSION[0]}.${VERSION[1]}.${VERSION[2]}"
          fi
          
          echo "New version: $NEW_VERSION"
          jq --arg v "$NEW_VERSION" '.version = $v' $DIRECTORY/manifest.json > temp.json && mv temp.json $DIRECTORY/manifest.json
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $VERSION_FILE
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add $DIRECTORY/manifest.json
          git commit -m "Increment version to $NEW_VERSION"
          git push
      - name: Build the project
        run: npm run build
      - name: Zip the app directory for release
        run: |
          cd $DIRECTORY
          zip -r ../${{ env.ZIP_NAME }} ./*
          cd ..
        
      - name: Upload zipped app as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-zip
          path: ${{ env.ZIP_NAME }}
  SubmitToChromeWebStore:
    runs-on: ubuntu-latest
    needs: PrepareBuildAndZip
    if: ${{ needs.PrepareBuildAndZip.outputs.NEW_VERSION != needs.PrepareBuildAndZip.outputs.OLD_VERSION || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download zipped app artifact
        uses: actions/download-artifact@v3
        with:
          name: release-zip
        
      - name: Submit to Google Chrome Web Store
        run: npx chrome-webstore-upload-cli@2 upload --source ${{ env.ZIP_NAME }} --extension-id ${{ secrets.EXTENSION_ID }} --client-id ${{ secrets.CLIENT_ID }} --client-secret ${{ secrets.CLIENT_SECRET }} --refresh-token ${{ secrets.REFRESH_TOKEN }} --auto-publish
        
  CreateAndUploadRelease:
    needs: [PrepareBuildAndZip, SubmitToChromeWebStore]
    runs-on: ubuntu-latest
    if: ${{ needs.PrepareBuildAndZip.outputs.NEW_VERSION != needs.PrepareBuildAndZip.outputs.OLD_VERSION || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download zipped app artifact
        uses: actions/download-artifact@v3
        with:
          name: release-zip
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.PrepareBuildAndZip.outputs.NEW_VERSION }}
          release_name: Release ${{ needs.PrepareBuildAndZip.outputs.NEW_VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ZIP_NAME }}
          asset_name: ${{ env.ZIP_NAME }}
          asset_content_type: application/zip